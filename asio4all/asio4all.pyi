from typing import Any, Union
from .enums import A4AError, A4ADeviceProperty, A4AInterfaceProperty, A4APinProperty

class PyA4AInterface:
    def __init__(self) -> None: ...
    def get_version(self) -> int: ...
    def enumerate(self) -> None: ...
    def set_callback(self, callback: Any) -> None: ...  # Not implemented
    def get_device_property_string(self, property: Union[int, A4ADeviceProperty], device_index: int) -> str: ...
    def get_device_property_dword(self, property: Union[int, A4ADeviceProperty], device_index: int) -> int: ...
    def set_device_property_dword(self, property: Union[int, A4ADeviceProperty], device_index: int, value: int) -> None: ...
    def get_interface_property_string(self, property: Union[int, A4AInterfaceProperty], device_index: int, interface_index: int) -> str: ...
    def get_interface_property_dword(self, property: Union[int, A4AInterfaceProperty], device_index: int, interface_index: int) -> int: ...
    def set_interface_property_dword(self, property: Union[int, A4AInterfaceProperty], device_index: int, interface_index: int, value: int) -> None: ...
    def get_pin_property_dword(self, property: Union[int, A4APinProperty], device_index: int, interface_index: int, pin_index: int) -> int: ...
    def set_pin_property_dword(self, property: Union[int, A4APinProperty], device_index: int, interface_index: int, pin_index: int, value: int) -> None: ...

class A4AException(Exception):
    code: int
    enum: str
    message: str
    def __init__(self, code: int, message: str = None) -> None: ...
    def is_error(self, enum: A4AError) -> bool: ...
    def _get_enum(self, code: int) -> str: ...
    def __str__(self) -> str: ...

class A4AWrapperException(Exception): ...